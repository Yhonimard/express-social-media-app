generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id                String         @id @default(uuid())
  username          String         @unique @db.VarChar(100)
  password          String         @db.VarChar(100)
  photoProfile      String
  firstName         String?        @db.VarChar(100)
  lastName          String?        @db.VarChar(100)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  posts             Post[]
  comments          Comment[]
  likes             PostUserLike[]
  userFriends       UserFriend[]   @relation("owner")
  friendUserFriends UserFriend[]   @relation("friend_user")
  profile           Profile?

  @@map("user")
}

model Post {
  id        String         @id @default(uuid())
  title     String         @db.VarChar(200)
  content   String         @db.VarChar(200)
  image     String
  authorId  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likesBy   PostUserLike[]

  @@map("post")
}

model Comment {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(200)
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comment")
}

model PostUserLike {
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
  @@map("user_post_like")
}

model UserFriend {
  id         String @id @default(uuid())
  senderId   String
  receiverId String

  sender    User     @relation("owner", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User     @relation("friend_user", fields: [receiverId], references: [id], onDelete: Cascade)
  confirmed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([senderId, receiverId])
  @@map("user_friendship")
}

model Profile {
  id        String    @id @default(uuid())
  bio       String?   @db.VarChar(100)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  birthday  DateTime?
  phone     Int?

  @@map("user_profile")
}
